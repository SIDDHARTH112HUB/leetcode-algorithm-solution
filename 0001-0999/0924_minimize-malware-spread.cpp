//Link: https://leetcode.com/problems/minimize-malware-spread/ 
class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        set<int> initNode(initial.begin(), initial.end());
        int ans = INT_MAX;
        int maxCnt = 0;
        cout<<"begin() "<<endl;
        while( initNode.begin() != initNode.end() ){
            int node = *initNode.begin();
            queue<int> q;
            q.push(node);
            unordered_set<int> v;
            v.insert(node);
            //cout<<node<<endl;
            while( q.size() ){
                int size = q.size();
                while( size-- > 0 ){
                    int n = q.front();
                    q.pop();
                    for( int i = 0; i<graph[n].size(); i++ ){
                        if( i == n )continue;
                        int next = graph[n][i];
                        if( next && v.count(i) == 0 ){
                            q.push(i);
                            v.insert(i);
                            //cout<<n<<" "<<i<<" "<<v.size()<<" "<< maxCnt <<endl;
                            if( initNode.count(i) )
                                initNode.erase(i);
                        }
                    }
                }
            }
            if( maxCnt <= v.size() ){
                
                if( maxCnt == v.size() )
                    ans = min(ans, node);
                else
                    ans = node;
                maxCnt = v.size();
            }
            initNode.erase(node);
        }
        return ans;
    }
    
    //void spreed(vector<vector<int>>& graph, int node, set<int> &initNode, )
};